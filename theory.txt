1)Что такое сериализация/дессериализация?
Сериализация - процесс преобразования из объекта в поток байтов, что позволяет сохранить состояние объекта, данные и структуру, в виде последовательности байтов, которые могут быть записаны в файл, переданы по сети или сохранены в б/д
Дессериализация - процесс, обратный сериализации, при котором поток байтов преобразовывается обратно в в исходный объект

2)Последовательность работы с потоком:
1. Создаем экземпляр потока (например FileInputStream || BufferedReader)
2. Соединяем с файлом, или с другим объектом, откуда хотим считать
3. Читаем/Записываем данные
4. Закрываем поток (close())

3)Виды потоков 
1. Входящие потоки. Используются для чтения данных (например FileInputStream, InputStreamReader)
2. Исходящие потоки. Используются для записи данных (например FileoutputStream, PrintWriter)
3. Буфферизированные потоки. Используются для для ускорения чтения или записи путем кэширования данных. (BufferedInputStream)
4. Character Streams. Используются для работы с символами побайтово. Обеспечивают поддержку кодировок (FileReader, FileWriter)
5. Объектные потоки. Используются для сериализации, дессериализации (например ObjectInputStream, ObjectOutputStream)

4) Чем отличается IO/NIO:
1.IO - блокирует, т.е. при чтении/записи поток ожидает завершения операции, блокируя текущий поток выполнения. NIO поддерживает неблокирующие операции, позволяя программе продолжать работу во время ожидания ввода-вывода
2.Вместо использования обычных потоков для чтения/записи, NIO использует каналы и селекторы, каналы являются двунаправленными конвейерами для передачи данных, а селекторы позволяют одному потоку управления мониторить множество каналов на наличие готовности для чтения/записи
3.NIO основывается на использовании буферов для хранения данных, это позволяет более эффективно управлять передачей данных между каналами.
4. NIO предоставляет возможности для пакетной обработки данных и работы с картой файлов, что может быть особенно полезным при работе с большими объемами данных или файлами

В целом, NIO предлагает более высокую производительность и масштабируемость при работе с вводом-выводом, особенно при обработке большого количества соединений или файлов, но требует более сложного кодирования по сравнению с традиционным IO.

